#!/bin/bash

VERSION="1.6"
TITULO="Wifislax64 Installer GUI $VERSION  -  By geminis_demon"
LOGO="/usr/share/pixmaps/WifislaxInstallerGUI/logo.png"
LOGO_ERROR="/usr/share/pixmaps/WifislaxInstallerGUI/error.png"
LOGO_STOP="/usr/share/pixmaps/WifislaxInstallerGUI/stop.png"
LOGO_NEXT="/usr/share/pixmaps/WifislaxInstallerGUI/next.png"
TMP="/tmp/WifislaxInstallerGUI"
LIVEOS="/etc/wifislax-version"
LOG=/mnt/live/tmp/wifislax64-livedbg
LIVECD="$(cat $LOG|grep -m1 ".xzm"|rev|cut -d/ -f5-|rev|sed 's/\<media\>/livemedia/g')"
MODULES="$(cat $LOG|sed 's/\<media\>/livemedia/g')"

if [ -d /sys/firmware/efi ]; then
  MODO=UEFI
  EFI=0
else
  EFI=1
  MODO=BIOS
fi


if [ ! -d "$LIVECD" ]; then
	
	LIVECD="$(echo "$LIVECD"|sed 's#^#/mnt/live#')"
	MODULES="$(echo "$MODULES"|sed 's#^#/mnt/live#')"
fi

if [ ! -d "/mnt/live/memory/changes" ]; then
	
	yad --on-top --center \
	    --width 500 \
	    --height 190 \
	    --title "$TITULO" \
	    --window-icon "$LOGO" \
	    --image "$LOGO_STOP"  \
	    --button "OK:0" \
	    --text-align "center" \
	    --text "\n\n\n    Para utilizar este instalador debes iniciar Wifislax64 en modo live  \n"
	    
	exit
fi

rm -rf "$TMP" && mkdir -p "$TMP"

(yad --on-top --center \
    --width 500 \
    --height 190 \
    --title "$TITULO" \
    --window-icon "$LOGO" \
    --image "$LOGO"  \
    --no-buttons \
    --progress --pulsate \
    --text-align "center" \
    --text "\n\n\n    Identificando particiones...  \n" \
& echo $! >"$TMP/pid")

lsblk -p -o KNAME,SIZE,FSTYPE -a|grep "ext[0-9]$" >"$TMP/particiones"

if [ $EFI -eq 0 ]; then
	EFI_TMP=$(mktemp)
	
	# Scan for EFI partitions:
	for drive in sda sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl sdm sdn sdo sdp mmcblk0 nvme0n1; do
	  if LANG=C fdisk -l /dev/$drive 2> /dev/null | grep -q "Disklabel type: gpt" ; then
		gdisk -l /dev/$drive 2> /dev/null | grep -w EF00 | while read efisp ; do
		  	if echo $drive | grep -q -E "mmc|nvme" ; then
		  		echo /dev/${drive}p$(expr $(echo "$efisp" | cut -b 1-4)) >> $EFI_TMP
			else
				echo /dev/$drive$(expr $(echo "$efisp" | cut -b 1-4)) >> $EFI_TMP
			fi
		done
	  fi
	done
	
	if [ "$(cat $EFI_TMP)" = "" ]; then # No EFI partitions
		EFI_MESSAGE="-Una partición EFI (FAT32 de +100MB con flags \"boot\" y \"esp\")"
		EFI_ERROR=0
	fi
	
	# Initially, we will just take the first EFI partition found, which
	# will probably be on /dev/sda:
	EFI_PART="$(cat $EFI_TMP | head -n 1)"
	
	#No lo usaremos mas
	rm -f $EFI_TMP
fi

if [ -z "$(cat "$TMP/particiones")" ]; then
	EXT_MESSAGE="-Una partición con formato ext4 para el sistema (10Gb minimo)\n"
	EXT_ERROR=0
fi


if [ $EXT_ERROR ] || [ $EFI_ERROR ]; then
	
	kill $(cat "$TMP/pid")
	
	yad --on-top --center \
	    --width 500 \
	    --height 190 \
	    --title "$TITULO" \
	    --window-icon "$LOGO" \
	    --image "$LOGO_STOP"  \
	    --button "Abrir Gparted:0" \
	    --button "Cerrar:1" \
	    --text-align "center" \
	    --text "\n\n\n    Primero debes crear:\n\n $EXT_MESSAGE $EFI_MESSAGE \n"
	
	case $? in
		
		0) gparted; $0; exit;;
		*) exit;;
	esac
	
fi

cat /proc/mounts|awk '{print $2}'|grep /run/media|sort -r|xargs umount &>/dev/null
os-prober >"$TMP/os-prober" 2>/dev/null

cat "$TMP/particiones"|while read DEV SIZE FS; do
	
	SO="$(grep "^$DEV" "$TMP/os-prober"|cut -d':' -f2)"
	[ -z "$SO" ] && SO="Ningún SO encontrado"
	echo "$DEV | $SIZE | $SO"
	
done|tr '\n' '!' >"$TMP/menu_particiones"

kill $(cat "$TMP/pid")

yad --on-top --center \
    --width 500 \
    --height 190 \
    --title "$TITULO" \
    --window-icon "$LOGO" \
    --image "$LOGO"  \
    --button "OK:0" \
    --button "Cancelar:1" \
    --text-align "center" \
    --text "\n\n    Selecciona una partición:  \n" \
    --form  --field="":CB "$(cat "$TMP/menu_particiones")" \
>"$TMP/return"

DEV="$(cat "$TMP/return"|cut -d' ' -f1)"
[ -z "$DEV" ] && exit
MNT="$(echo "$DEV"|sed 's/dev/mnt/')"
[ ! -d "$MNT" ] && mkdir -p "$MNT"
mount -t ext4 "$DEV" "$MNT"

SPACE="$(cat "$TMP/particiones"|rev|cut -d ' ' -f2|rev|cut -d , -f-1|sed 's/G//g'|tr -d " \t\n\r")"

if [ $SPACE -lt 10 ]; then
		yad --on-top --center \
		    --width 500 \
		    --height 190 \
		    --title "$TITULO" \
		    --window-icon "$LOGO" \
		    --image "$LOGO_STOP"  \
		    --button "OK:0" \
		    --text-align "center" \
		    --text "\n\n\n    La particion ext4 debe ser al menos de 10Gb  \n"
		exit
fi

if [ "$(ls -a "$MNT"|egrep -xv ".|..|lost\+found")" ]; then
	
	yad --on-top --center \
	    --width 500 \
	    --height 190 \
	    --title "$TITULO" \
	    --window-icon "$LOGO" \
	    --image "$LOGO"  \
	    --button "OK:0" \
	    --button "Cancelar:1" \
	    --text-align "center" \
	    --text "\n\n\n    La partición $DEV no está vacía, \n  ¿Desea formatear la partición? (RECOMENDADO)  \n"
	
	case $? in
		
		0) (yad --on-top --center \
			--width 500 \
			--height 190 \
			--title "$TITULO" \
			--window-icon "$LOGO" \
			--image "$LOGO"  \
			--no-buttons \
			--progress --pulsate \
			--text-align "center" \
			--text "\n\n\n    Formateando la partición $DEV...  \n" \
			& echo $! >"$TMP/pid")
			
			umount "$DEV"
			
			yes | mkfs.ext4 -O 64bit -t ext4 "$DEV"
			
			if [ $? -ne 0 ]; then
				
				kill $(cat "$TMP/pid")
				
				yad --on-top --center \
				    --width 500 \
				    --height 190 \
				    --title "$TITULO" \
				    --window-icon "$LOGO" \
				    --image "$LOGO_ERROR"  \
				    --button "OK:0" \
				    --text-align "center" \
				    --text "\n\n\n    Ocurrió un error al formatear la partición, no se puede continuar  \n"
				exit
			fi
		;;
		
		1) echo;;
		*) exit;;
	esac
fi

kill $(cat "$TMP/pid") 2>/dev/null

if [ ! "$(mount|grep "^$DEV")" ]; then
	
	mount -t ext4 "$DEV" "$MNT"
	
	if [ $? -ne 0 ]; then
		
		yad --on-top --center \
		    --width 500 \
		    --height 190 \
		    --title "$TITULO" \
		    --window-icon "$LOGO" \
		    --image "$LOGO_ERROR"  \
		    --button "OK:0" \
		    --text-align "center" \
		    --text "\n\n\n    Ocurrió un error al montar la partición, no se puede continuar  \n"
		exit
	fi
fi

N1="$(echo "$MODULES"|wc -l)"
N2=0
PROGRESS=0
echo 0 >"$TMP/progress_bar"

(for X in $MODULES; do
	
	N2=$(($N2+1))
	PORCENT=$(($(($N2*100))/$N1))
	echo $PORCENT >"$TMP/progress_bar"
	echo $PORCENT
	[ $PORCENT -lt 100 ] && echo "#Progreso: ${PORCENT}%"||echo "#Realizando tareas finales..."
	(echo
	echo "Instalando $X"
	unsquashfs -n -f -dest "${MNT}" "$X"
	) 1>&2
done|\
yad --on-top --center \
    --width 500 \
    --height 190 \
    --title "$TITULO" \
    --window-icon "$LOGO" \
    --image "$LOGO"  \
    --no-buttons \
    --progress \
    --text-align "center" \
    --text "\n\n\n    Instalando Wifislax64 $(cat $LIVEOS|cut -d' ' -f2) en $DEV  \n" \
& echo $! >"$TMP/pid")

while true; do sleep 1; [ $(cat "$TMP/progress_bar") -ge 100 ] && break; done

# Fstab nuevo
rm -rf "$MNT/etc/fstab" 2> /dev/null
echo "$DEV        /                ext4        defaults         1   1
proc      /proc       proc        defaults   0   0
sysfs     /sys        sysfs       defaults   0   0
tmpfs     /dev/shm    tmpfs       defaults,nodev,nosuid,mode=1777  0   0
devpts    /dev/pts    devpts      gid=5,mode=620   0   0" > "$MNT/etc/fstab"

SWAP_TMP=$(mktemp)

# Scan for SWAP partitions:
for drive in sda sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl sdm sdn sdo sdp mmcblk0 nvme0n1; do
	gdisk -l /dev/$drive 2> /dev/null | grep -w 8200 | while read swapsp ; do
	  echo /dev/$drive$(expr $(echo "$swapsp" | cut -b 1-4)) >> $SWAP_TMP
	done
done

if [ ! "$(cat $SWAP_TMP)" = "" ]; then # Found swap partition

	SWAP_PART="$(cat $SWAP_TMP | head -n 1)"
	echo -e "\nUUID=$(blkid $SWAP_PART -o value -s UUID)\tnone\tswap\tsw\t0\t0" >> $MNT/etc/fstab
fi

rm -f $SWAP_TMP


if [ $EFI -eq 0 ]; then

	mkdir -p $MNT/boot/efi
	echo -e "\nUUID=$(blkid $EFI_PART -o value -s UUID)   /boot/efi        vfat        umask=0077       0   1" >> $MNT/etc/fstab

fi

cp -rf "$LIVECD/boot/vmlinuz" "$MNT/boot/vmlinuz-$(uname -r)"
cp -rf /etc/{timezone,hardwareclock,localtime,locale.conf} "$MNT/etc/"
cp -rf /etc/rc.d/rc.keymap "$MNT/etc/rc.d/"
cp -rf /etc/profile.d/lang.sh "$MNT/etc/profile.d/"
cp -rf /etc/X11/xorg.conf.d/30-keyboard.conf "$MNT/etc/X11/xorg.conf.d/"

if [ -f /etc/adjtime ]; then
cp -rf /etc/adjtime "$MNT/etc/"
fi

chmod +x "$MNT/etc/xdg/autostart/Kernel_advisor.desktop"
chmod +x "$MNT/etc/xdg/autostart/WifislaxUpdaterGUI.desktop"
chmod +x "$MNT/etc/rc.d/rc.WifislaxUpdaterGUI"

tune2fs -L "$(cat $LIVEOS|tr ' ' '-')" "$DEV"
kill $(cat "$TMP/pid")

yad --on-top --center \
    --width 500 \
    --height 190 \
    --title "$TITULO" \
    --window-icon "$LOGO" \
    --image "$LOGO_NEXT"  \
    --button "OK:0" \
    --text-align "center" \
    --text "\n\n\n    La instalación de Wifislax64 ha completado,  \n    se procederá a instalar el GRUB  \n"

Grub2InstallerGUI
exit
